// frontend/src/pages/adminUI/SearchManagement.tsx
import React, { useState, useEffect } from 'react';
import AdminRoute from '../../api/adminAPI/AdminRoute';
import AdminLayout from './components/AdminLayout';
import DateRangePicker from './components/DateRangePicker';
import SearchStatCards from './components/SearchStatCards';
import SearchAnalyticsDashboard from './components/SearchAnalyticsDashboard';
import SearchHistoryTable from './components/SearchHistoryTable';
import { addDays, subDays } from 'date-fns';

// Import service cho ph√¢n t√≠ch t√¨m ki·∫øm
import { getSearchAnalytics } from '../../api/adminAPI/searchManagement';

const SearchManagement = () => {
  // State cho d·ªØ li·ªáu ph√¢n t√≠ch
  const [analyticsData, setAnalyticsData] = useState({
    topKeywords: [],
    searchesByDay: [],
    topFilters: [],
    peakHours: [],
    tableData: [],
    totalSearches: 0,
    uniqueUsers: 0
  });
  
  // State cho b·ªô l·ªçc ng√†y
  const [startDate, setStartDate] = useState<Date | undefined>(undefined);
  const [endDate, setEndDate] = useState<Date | undefined>(undefined);
  const [isDateFiltered, setIsDateFiltered] = useState(false);
  
  // State cho tr·∫°ng th√°i loading
  const [isLoading, setIsLoading] = useState(true);
  
  // T·∫£i d·ªØ li·ªáu ph√¢n t√≠ch khi component mount ho·∫∑c khi √°p d·ª•ng b·ªô l·ªçc
  useEffect(() => {
    const fetchAnalyticsData = async () => {
      setIsLoading(true);
      
      try {
        console.log("üìä [Admin] Loading search analytics data");
        
        // X√°c ƒë·ªãnh tham s·ªë truy·ªÅn v√†o API
        const params: [Date | null, Date | null, boolean] = [
          isDateFiltered && startDate ? startDate : null,
          isDateFiltered && endDate ? endDate : null,
          false // S·ª≠ d·ª•ng d·ªØ li·ªáu th·ª±c t·∫ø t·ª´ Firestore
        ];
        
        // G·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu ph√¢n t√≠ch
        const data = await getSearchAnalytics(...params);
        setAnalyticsData(data);
        
        console.log(`‚úÖ [Admin] Loaded search data: ${data.totalSearches} searches from ${data.uniqueUsers} users`);
      } catch (error) {
        console.error("‚ùå [Admin] Error loading search analytics:", error);
      } finally {
        // Tr√¨ ho√£n vi·ªác t·∫Øt tr·∫°ng th√°i loading ƒë·ªÉ t·∫°o hi·ªáu ·ª©ng m∆∞·ª£t m√† h∆°n
        setTimeout(() => {
          setIsLoading(false);
        }, 500);
      }
    };
    
    fetchAnalyticsData();
  }, [isDateFiltered, startDate, endDate]);
  
  // X·ª≠ l√Ω √°p d·ª•ng b·ªô l·ªçc ng√†y
  const handleApplyDateFilter = () => {
    if (startDate && endDate) {
      console.log(`üîç [Admin] Applying date filter: ${startDate.toISOString()} to ${endDate.toISOString()}`);
      
      // ƒê·∫£m b·∫£o gi·ªù c·ªßa startDate l√† ƒë·∫ßu ng√†y
      const adjustedStartDate = new Date(startDate);
      adjustedStartDate.setHours(0, 0, 0, 0);
      setStartDate(adjustedStartDate);
      
      // ƒê·∫£m b·∫£o gi·ªù c·ªßa endDate l√† cu·ªëi ng√†y
      const adjustedEndDate = new Date(endDate);
      adjustedEndDate.setHours(23, 59, 59, 999);
      setEndDate(adjustedEndDate);
      
      setIsDateFiltered(true);
    }
  };
  
  // X·ª≠ l√Ω reset b·ªô l·ªçc ng√†y
  const handleResetDateFilter = () => {
    console.log("üîÑ [Admin] Resetting date filter");
    setStartDate(undefined);
    setEndDate(undefined);
    setIsDateFiltered(false);
  };
  
  // T·∫°o c√°c preset ph·ªï bi·∫øn cho b·ªô l·ªçc
  const applyLast7Days = () => {
    const end = new Date();
    const start = subDays(end, 6); // 7 ng√†y (bao g·ªìm h√¥m nay)
    setStartDate(start);
    setEndDate(end);
    setIsDateFiltered(true);
  };
  
  const applyLast30Days = () => {
    const end = new Date();
    const start = subDays(end, 29); // 30 ng√†y (bao g·ªìm h√¥m nay)
    setStartDate(start);
    setEndDate(end);
    setIsDateFiltered(true);
  };
  
  return (
    <AdminRoute>
      <AdminLayout title="Search Behavior Analytics">
        <div className="px-4 py-6 sm:px-0">
          <div className="bg-white overflow-hidden shadow-sm sm:rounded-lg p-6">
            {/* Ti√™u ƒë·ªÅ v√† m√¥ t·∫£ */}
            <div className="mb-6">
              <h1 className="text-2xl font-bold text-gray-900">Analyze user search patterns to understand what users are looking for and optimize content accordingly.</h1>
            </div>
            
            {/* Preset buttons */}
            <div className="flex space-x-2 mb-4">
              <button 
                onClick={applyLast7Days}
                className="px-4 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
              >
                Last 7 Days
              </button>
              <button 
                onClick={applyLast30Days}
                className="px-4 py-2 text-sm bg-gray-100 hover:bg-gray-200 rounded-md transition-colors"
              >
                Last 30 Days
              </button>
            </div>
            
            {/* Date Picker */}
            <DateRangePicker 
              startDate={startDate}
              endDate={endDate}
              onStartDateChange={setStartDate}
              onEndDateChange={setEndDate}
              onApplyFilter={handleApplyDateFilter}
              onResetFilter={handleResetDateFilter}
              isFiltered={isDateFiltered}
            />
            
            {/* Stat Cards */}
            <div className="mt-6">
              <SearchStatCards 
                totalSearches={analyticsData.totalSearches}
                uniqueUsers={analyticsData.uniqueUsers}
                topKeyword={analyticsData.topKeywords[0]?.keyword || 'N/A'}
                topKeywordCount={analyticsData.topKeywords[0]?.count || 0}
                dateRange={{
                  start: startDate,
                  end: endDate
                }}
                isLoading={isLoading}
              />
            </div>
            
            {/* Charts Dashboard */}
            <SearchAnalyticsDashboard 
              analytics={analyticsData}
              isLoading={isLoading}
            />
            
            {/* Search History Table */}
            <SearchHistoryTable 
              tableData={analyticsData.tableData || []}
              isLoading={isLoading}
            />
          </div>
        </div>
      </AdminLayout>
    </AdminRoute>
  );
};


export const getServerSideProps = async (context) => {
  return {
    props: {}, // Will be passed to the page component as props
  }
};

export default SearchManagement;